{"version":3,"sources":["actions/actions.js","search/Search.js","musicSummary/MusicDisplay.js","musicSummary/MusicSummary.js","App.js","reducers/reducers.js","serviceWorker.js","index.js"],"names":["logSearch","artist","type","payload","showMusicSummary","show","currentArtist","spotifyAlbumSuccess","token","spotifyAuth","url","arguments","length","undefined","postData","headers","fetch","method","body","postFetch","Authorization","content-type","spotifySearch","spotifyAccessToken","artistEncode","replace","concat","spotifyAlbums","artistId","searchArtist","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","_getState","freshToken","spotifyAuthResponse","spotifyAuthData","spotifySearchResponse","spotifySearchData","spotifyArtistName","spotifyArtistId","spotifyAlbumsResponse","spotifyAlbumsData","wrap","_context","prev","next","sent","json","access_token","t0","console","log","artists","items","name","id","t1","stop","_x","_x2","apply","this","connect","state","searchedArtists","bindActionCreators","_React$useState","React","useState","_React$useState2","slicedToArray","search","setSearch","react_default","createElement","className","Search_default","InputBase","placeholder","inputProps","aria-label","value","onChange","event","target","onKeyPress","key","Button","variant","onClick","useStyles","makeStyles","summaryContent","flexWrap","detailRoot","maxHeight","overflowY","detailStyle","width","display","justifyContent","alignItems","marginBottom","marginTop","MusicDisplay","service","albums","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","content","Typography","style","gutterBottom","ExpansionPanelDetails","root","map","album","textAlign","href","external_urls","spotify","rel","src","images","alt","height","marginLeft","flexBasis","total_tracks","release_date","substring","Divider","musicSummary_MusicDisplay","color","search_Search","musicSummary_MusicSummary","combineReducers","action","includes","toConsumableArray","lookup","cleanedAlbums","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","push","err","return","cleanSpotifyData","Boolean","window","location","hostname","match","store","createStore","reducers","compose","applyMiddleware","thunk","navigator","userAgent","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"8XACMA,EAAY,SAACC,GACjB,MAAO,CAAEC,KAAM,aAAcC,QAASF,IAGlCG,EAAmB,SAACC,GACxB,MAAO,CAAEH,KAAM,qBAAsBC,QAASE,IAG1CC,EAAgB,SAACL,GACrB,MAAO,CAAEC,KAAM,iBAAkBC,QAASF,IAetCM,EAAsB,SAACC,GAC3B,MAAO,CAAEN,KAAM,wBAAyBC,QAASK,IAmB7CC,EAAc,WAOlB,OAfgB,WAA2C,IAA1CC,EAA0CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApC,GAAIG,EAAgCH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArB,GAAII,EAAiBJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACpD,OAAOK,MAAM,uCAAyCN,EAAK,CACzDO,OAAQ,OACRF,UACAG,KAAMJ,IAWDK,CANK,yCACK,gCACD,CACdC,cAAiB,iGACjBC,eAAgB,uCAKdC,EAAgB,SAACC,EAAoBtB,GACzC,IACMuB,EAAevB,EAAOwB,QAAQ,KAAM,OAC1C,OAAOT,MAAK,GAAAU,OAFA,oCAEA,OAAAA,OAAaF,EAAb,wBAAiD,CAC3DT,QAAS,CAACK,cAAiB,UAAYG,MAIrCI,EAAgB,SAACJ,EAAoBK,GACzC,IAAMlB,EAAG,sCAAAgB,OAAyCE,EAAzC,WACT,OAAOZ,MAAK,GAAAU,OAAIhB,EAAJ,kCAAyC,CACnDK,QAAS,CAACK,cAAiB,UAAYG,MAI9BM,EAAe,SAAA5B,GAC1B,sBAAA6B,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,EAAUC,GAAjB,IAAAC,EAAAhB,EAAAiB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAf,EAAAC,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACLf,EAASjC,GAAiB,IADrBmC,EAE0BD,IAAvBf,EAFHgB,EAEGhB,mBAFH,CAAA2B,EAAAE,KAAA,gBAKHf,EA1DG,CAAEnC,KAAM,0BAqDRgD,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAOiC3C,IAPjC,cAOKgC,EAPLS,EAAAG,KAAAH,EAAAE,KAAA,GAQ6BX,EAAoBa,OARjD,QAQKZ,EARLQ,EAAAG,KASDb,EAAaE,EAAgBa,aAC7BlB,EA3DC,CAAEnC,KAAM,wBAAyBC,QA2DLqC,IAV5BU,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAaDO,QAAQC,IAAI,cAAZR,EAAAM,IACAnB,EAvDC,CAAEnC,KAAM,0BAyCR,eAiBLmC,EAASrC,EAAUC,IAjBdiD,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAmBiC9B,EAAckB,GAAcjB,EAAoBtB,GAnBjF,eAmBG0C,EAnBHO,EAAAG,KAAAH,EAAAE,KAAA,GAoB6BT,EAAsBW,OApBnD,WAoBGV,EApBHM,EAAAG,KAqBGR,EAAoBD,EAAkBe,QAAQC,MAAM,GAAGC,OACvDf,EAAkBF,EAAkBe,QAAQC,MAAM,GAAGE,IAtBxD,CAAAZ,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAwBmCzB,EAAca,GAAcjB,EAAoBuB,GAxBnF,eAwBKC,EAxBLG,EAAAG,KAAAH,EAAAE,KAAA,GAyB+BL,EAAsBO,OAzBrD,QAyBKN,EAzBLE,EAAAG,KA0BDhB,EAAS/B,EAAcuC,IACvBR,EAAS9B,EAAoByC,EAAkBY,QAC/CvB,EAASjC,GAAiB,IA5BzB8C,EAAAE,KAAA,iBA8BDf,EAAS/B,EAAc,KACvB+B,EAASjC,GAAiB,IA/BzB,QAAA8C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,UAmCHO,QAAQC,IAAI,gBAAZR,EAAAa,IACA1B,EAzEG,CAAEnC,KAAM,0BA0EXmC,EA9FG,CAAEnC,KAAM,2BA+FXmC,EAASjC,GAAiB,IAtCvB,yBAAA8C,EAAAc,SAAA5B,EAAA,0BAAP,gBAAA6B,EAAAC,GAAA,OAAApC,EAAAqC,MAAAC,KAAAzD,YAAA,IC5Ba0D,cARS,SAAAC,GACtB,MAAO,CAACC,gBAAiBD,EAAMC,kBAGN,SAAAlC,GACzB,OAAOmC,YAAmB,CAAE3C,gBAAgBQ,IAG/BgC,CAjCA,SAAAvC,GAAsB,IAAnBD,EAAmBC,EAAnBD,aAAmB4C,EACRC,IAAMC,SAAS,IADPC,EAAA7C,OAAA8C,EAAA,EAAA9C,CAAA0C,EAAA,GAC5BK,EAD4BF,EAAA,GACrBG,EADqBH,EAAA,GAGnC,OACEI,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,UACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,eACbF,EAAA9C,EAAA+C,cAACE,EAAAjD,EAAD,OAEF8C,EAAA9C,EAAA+C,cAACG,EAAA,EAAD,CACEF,UAAU,eACVG,YAAY,eACZC,WAAY,CAAEC,aAAc,UAC5BC,MAAQV,EACRW,SAAW,SAACC,GAAD,OAAWX,EAAUW,EAAMC,OAAOH,QAC7CI,WAAa,SAAAF,GAAK,MAAkB,UAAdA,EAAMG,KAAmBhE,EAAaiD,MAE9DE,EAAA9C,EAAA+C,cAACa,EAAA,EAAD,CACEZ,UAAU,gBACVa,QAAQ,WACRC,QAAU,kBAAMnE,EAAaiD,KAH/B,iGCdAmB,EAAYC,YAAW,CAC3BC,eAAgB,CAAEC,SAAU,QAC5BC,WAAY,CAAED,SAAU,OAAQE,UAAW,IAAKC,UAAW,YAGvDC,EAAc,CAClBC,MAAO,OACPC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SACZC,aAAc,GACdC,UAAW,IA4CEC,EAzCM,SAAAjF,GAAwC,IAArCxB,EAAqCwB,EAArCxB,cAAe0G,EAAsBlF,EAAtBkF,QAASC,EAAanF,EAAbmF,OACxCC,EAAUjB,IAEhB,OACEjB,EAAA9C,EAAA+C,cAACkC,EAAA,EAAD,KACEnC,EAAA9C,EAAA+C,cAACmC,EAAA,EAAD,CACEC,WAAYrC,EAAA9C,EAAA+C,cAACqC,EAAApF,EAAD,MACZqF,gBAAc,gBACdzD,GAAG,gBACHoD,QAAS,CAAEM,QAASN,EAAQf,iBAE5BnB,EAAA9C,EAAA+C,cAACwC,EAAA,EAAD,CAAYC,MAAO,CAAEjB,MAAO,QAAUV,QAAQ,KAAK4B,cAAY,GAA/D,GAAAjG,OAAoEpB,EAApE,QAAAoB,OAAwFsF,IACxFhC,EAAA9C,EAAA+C,cAACwC,EAAA,EAAD,CAAYC,MAAO,CAAEjB,MAAO,QAAUV,QAAQ,KAAK4B,cAAY,GAA/D,GAAAjG,OACOuF,EAAOrG,OADd,UAAAc,OAC+C,IAAlBuF,EAAOrG,OAAe,GAAK,OAGxDqG,EAAOrG,OAAS,GAChBoE,EAAA9C,EAAA+C,cAAC2C,EAAA,EAAD,CAAuBV,QAAS,CAAEW,KAAMX,EAAQb,aAC7CY,EAAOa,IAAI,SAAAC,GACV,OAAO/C,EAAA9C,EAAA+C,cAAA,OAAKY,IAAKkC,EAAMjE,GAAI4D,MAAO,CAAEjB,MAAO,OAAQuB,UAAW,SAC5DhD,EAAA9C,EAAA+C,cAAA,OAAKyC,MAAOlB,GACVxB,EAAA9C,EAAA+C,cAAA,KAAGgD,KAAMF,EAAMG,cAAcC,QAASxC,OAAO,SAASyC,IAAI,uBACxDpD,EAAA9C,EAAA+C,cAAA,OAAKoD,IAAKN,EAAMO,OAAO,GAAG5H,IAAK6H,IAAI,cAAcC,OAAO,MAAM/B,MAAM,SAEtEzB,EAAA9C,EAAA+C,cAAA,OAAKyC,MAAO,CAAEhB,QAAS,OAAQC,eAAgB,gBAAiB8B,WAAY,GAAIhC,MAAO,QACrFzB,EAAA9C,EAAA+C,cAAA,OAAKyC,MAAO,CAAEgB,UAAW,IAAKhC,QAAS,OAAQC,eAAgB,eAC7D3B,EAAA9C,EAAA+C,cAACwC,EAAA,EAAD,CAAY1B,QAAQ,MAAMgC,EAAMlE,OAElCmB,EAAA9C,EAAA+C,cAACwC,EAAA,EAAD,CAAY1B,QAAQ,KAAKb,UAAU,yBAAnC,GAAAxD,OAA+DqG,EAAMY,aAArE,YACA3D,EAAA9C,EAAA+C,cAACwC,EAAA,EAAD,CAAY1B,QAAQ,KAAKb,UAAU,uBAAuB6C,EAAMa,aAAaC,UAAU,EAAG,MAG9F7D,EAAA9C,EAAA+C,cAAC6D,EAAA,EAAD,CAAS/C,QAAQ,iBCtBhB1B,qBARS,SAACC,GACvB,MAAO,CACLC,gBAAiBD,EAAMC,gBACvB5C,cAAe2C,EAAM3C,cACrBrB,cAAegE,EAAMhE,gBAIV+D,CA9BM,SAAAvC,GAAqD,IAAnDyC,EAAmDzC,EAAnDyC,gBAAiBjE,EAAkCwB,EAAlCxB,cAAeqB,EAAmBG,EAAnBH,cACrD,OACEqD,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,iBACZ5E,GAAiBqB,EAChBqD,EAAA9C,EAAA+C,cAAC8D,EAAD,CACEzI,cAAeA,EACf0G,QAAQ,UACRC,OAAQtF,IAERqD,EAAA9C,EAAA+C,cAAA,MAAIyC,MAAO,CAAEsB,MAAO,UAApB,wBAEHzE,EAAgB3D,OAAS,GACxBoE,EAAA9C,EAAA+C,cAAA,OAAKyC,MAAO,CAAEsB,MAAO,UACnBhE,EAAA9C,EAAA+C,cAAA,uCACCV,EAAgBuD,IAAI,SAAA7H,GACnB,OAAO+E,EAAA9C,EAAA+C,cAAA,KAAGY,IAAK5F,GAASA,gBCGpC,IAQeoE,cARS,SAACC,GACvB,MAAO,CACLC,gBAAiBD,EAAMC,gBACvBhD,mBAAoB+C,EAAM/C,mBAC1BnB,iBAAkBkE,EAAMlE,mBAIbiE,CA1Bf,SAAAvC,GAAwE,IAAzDyC,EAAyDzC,EAAzDyC,gBAAiBhD,EAAwCO,EAAxCP,mBAAoBnB,EAAoB0B,EAApB1B,iBAClD,OACE4E,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,OACbF,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,cAChBF,EAAA9C,EAAA+C,cAAA,mCAEFD,EAAA9C,EAAA+C,cAACgE,EAAD,MACC1E,EAAgB3D,OAAS,EACrBW,EAECnB,EACE4E,EAAA9C,EAAA+C,cAACiE,EAAD,MACA,KAHFlE,EAAA9C,EAAA+C,cAAA,MAAIyC,MAAO,CAAEsB,MAAO,UAApB,oDAIF,gBC8CKG,cAAgB,CAAE5E,gBA/DF,WAAkC,IAAjCA,EAAiC5D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIyI,EAAWzI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/D,MAAoB,eAAhBuI,EAAOlJ,MACJqE,EAAgB8E,SAASD,EAAOjJ,SAIhCoE,EAHH,GAAA7C,OAAAK,OAAAuH,EAAA,EAAAvH,CAAWwC,GAAX,CAA4B6E,EAAOjJ,WA4DSC,iBAtDlB,WAAsC,IAArCA,EAAqCO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXyI,EAAWzI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpE,MAAoB,uBAAhBuI,EAAOlJ,KACFkJ,EAAOjJ,QAETC,GAkD2DmB,mBAtClC,WAAqC,IAApCA,EAAoCZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIyI,EAAWzI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrE,OAAQuI,EAAOlJ,MACb,IAAK,wBACH,MAAO,UACT,IAAK,wBACH,OAAOkJ,EAAOjJ,QAChB,IAAK,wBACH,OAAO,EACT,QACE,OAAOoB,IA6B2EI,cAb3D,WAAmC,IAAlCA,EAAkChB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXyI,EAAWzI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9D,OAAQuI,EAAOlJ,MACb,IAAK,wBAGH,OAjBmB,SAAC+G,GACxB,IAAIsC,EAAS,GACTC,EAAgB,GAFeC,GAAA,EAAAC,GAAA,EAAAC,OAAA9I,EAAA,IAGnC,QAAA+I,EAAAC,EAAkB5C,EAAlB6C,OAAAC,cAAAN,GAAAG,EAAAC,EAAAzG,QAAA4G,MAAAP,GAAA,EAA0B,KAAjB1B,EAAiB6B,EAAApE,MACnB+D,EAAOxB,EAAMlE,QAChB0F,EAAOxB,EAAMlE,OAAQ,EACrB2F,EAAcS,KAAKlC,KANY,MAAAmC,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GASnC,OAAOH,EAMmBY,CAAiBhB,EAAOjJ,SAGhD,IAAK,wBACH,OAAO,EACT,QACE,OAAOwB,IAI0FrB,cA/C1E,WAAgC,IAA/BA,EAA+BK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIyI,EAAWzI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3D,MAAoB,mBAAhBuI,EAAOlJ,KACFkJ,EAAOjJ,QACW,2BAAhBiJ,EAAOlJ,KACT,GAEFI,KCZW+J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,YACZC,EACAC,YACEC,YAAgBC,KAChBT,OAAOU,UAAUC,UAAU5B,SAAS,UAClCiB,OAAOY,8BAAgCZ,OAAOY,+BAAiCL,MAIrFM,IAASC,OACPpG,EAAA9C,EAAA+C,cAACoG,EAAA,EAAD,CAAUX,MAAOA,GACf1F,EAAA9C,EAAA+C,cAACqG,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBR,WACrBA,UAAUS,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f10d0d98.chunk.js","sourcesContent":["\nconst logSearch = (artist) => {\n  return { type: 'LOG_SEARCH', payload: artist }\n}\n\nconst showMusicSummary = (show) => {\n  return { type: 'SHOW_MUSIC_SUMMARY', payload: show }\n}\n\nconst currentArtist = (artist) => {\n  return { type: 'CURRENT_ARTIST', payload: artist}\n}\n\nconst currentArtistFailure = () => {\n  return { type: 'CURRENT_ARTIST_FAILURE'}\n}\n\nconst spotifyTokenLoading = () => {\n  return { type: 'SPOTIFY_TOKEN_LOADING' }\n}\n\nconst spotifyTokenSuccess = (token) => {\n  return { type: 'SPOTIFY_TOKEN_SUCCESS', payload: token }\n}\n\nconst spotifyAlbumSuccess = (token) => {\n  return { type: 'SPOTIFY_ALBUM_SUCCESS', payload: token }\n}\n\nconst spotifyTokenFailure = () => {\n  return { type: 'SPOTIFY_TOKEN_FAILURE' }\n}\n\nconst spotifyAlbumFailure = () => {\n  return { type: 'SPOTIFY_ALBUM_FAILURE' }\n}\n\nconst postFetch = (url = '', postData = {}, headers = {}) => {\n  return fetch(\"https://cors-anywhere.herokuapp.com/\" + url, {\n    method: 'POST',\n    headers,\n    body: postData\n  });\n}\n\nconst spotifyAuth = () => {\n  const url = 'https://accounts.spotify.com/api/token';\n  const postData = 'grant_type=client_credentials';\n  const headers = {\n    'Authorization': 'Basic NTdhZDkxMzdkNmNlNDVhOTk1ODBiMWY1N2UzNTc0Zjc6OTIwNTE0ZGUwYTVlNDk1OTg0Y2VmN2NkOGRkMjg5NzA=',\n    'content-type': 'application/x-www-form-urlencoded'\n  }\n  return postFetch(url, postData, headers);\n}\n\nconst spotifySearch = (spotifyAccessToken, artist) => {\n  const url = 'https://api.spotify.com/v1/search';\n  const artistEncode = artist.replace(/ /g, '%20')\n  return fetch(`${url}?q=${artistEncode}&type=artist&limit=1`, {\n    headers: {'Authorization': 'Bearer ' + spotifyAccessToken}\n  })\n}\n\nconst spotifyAlbums = (spotifyAccessToken, artistId) => {\n  const url = `https://api.spotify.com/v1/artists/${artistId}/albums`;\n  return fetch(`${url}?include_groups=album&limit=50`, {\n    headers: {'Authorization': 'Bearer ' + spotifyAccessToken}\n  })\n}\n\nexport const searchArtist = artist => {\n  return async (dispatch, getState) => {\n    dispatch(showMusicSummary(false));\n    const { spotifyAccessToken } = getState()\n    let freshToken;\n    if (!spotifyAccessToken) {\n      dispatch(spotifyTokenLoading())\n      try {\n        const spotifyAuthResponse = await spotifyAuth();\n        const spotifyAuthData = await spotifyAuthResponse.json();\n        freshToken = spotifyAuthData.access_token;\n        dispatch(spotifyTokenSuccess(freshToken));\n      }\n      catch (error) {\n        console.log('auth error:', error);\n        dispatch(spotifyTokenFailure())\n      }\n    }\n    dispatch(logSearch(artist));\n    try {\n      const spotifySearchResponse = await spotifySearch(freshToken || spotifyAccessToken, artist);\n      const spotifySearchData = await spotifySearchResponse.json();\n      const spotifyArtistName = spotifySearchData.artists.items[0].name;\n      const spotifyArtistId = spotifySearchData.artists.items[0].id;\n      if (spotifyArtistId) {\n        const spotifyAlbumsResponse = await spotifyAlbums(freshToken || spotifyAccessToken, spotifyArtistId);\n        const spotifyAlbumsData = await spotifyAlbumsResponse.json();\n        dispatch(currentArtist(spotifyArtistName));\n        dispatch(spotifyAlbumSuccess(spotifyAlbumsData.items));\n        dispatch(showMusicSummary(true));\n      } else {\n        dispatch(currentArtist(''));\n        dispatch(showMusicSummary(true));\n      }\n    }\n    catch (error) {\n      console.log('search error:', error);\n      dispatch(spotifyAlbumFailure());\n      dispatch(currentArtistFailure());\n      dispatch(showMusicSummary(true));\n    }\n  }\n}","import React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport Button from '@material-ui/core/Button';\nimport './search.css'\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { searchArtist } from '../actions/actions';\n\nconst Search = ( {searchArtist }) => {\n  const [search,setSearch] = React.useState('')\n\n  return (\n    <div className=\"search\">\n      <div className=\"search-icon\">\n        <SearchIcon />\n      </div>\n      <InputBase\n        className=\"search-input\" \n        placeholder=\"Search…\"\n        inputProps={{ 'aria-label': 'Search' }}\n        value={ search }\n        onChange={ (event) => setSearch(event.target.value) }\n        onKeyPress={ event => event.key === 'Enter' && searchArtist(search) }\n      />\n      <Button\n        className=\"search-button\"\n        variant=\"outlined\"\n        onClick={ () => searchArtist(search) }\n      >Find Albums</Button>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {searchedArtists: state.searchedArtists};\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ searchArtist }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\n\nimport './musicDisplay.css'\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  summaryContent: { flexWrap: 'wrap' },\n  detailRoot: { flexWrap: 'wrap', maxHeight: 475, overflowY: 'scroll' },\n})\n\nconst detailStyle = {\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  marginBottom: 12,\n  marginTop: 12,\n}\n\nconst MusicDisplay = ({ currentArtist, service, albums }) => {\n  const classes = useStyles();\n\n  return (\n    <ExpansionPanel>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"music-summary\"\n        id=\"music-summary\"\n        classes={{ content: classes.summaryContent }}\n      >\n        <Typography style={{ width: '100%' }} variant='h3' gutterBottom>{`${currentArtist} on ${service}`}</Typography>\n        <Typography style={{ width: '100%' }} variant='h3' gutterBottom>\n          { `${albums.length} Album${albums.length === 1 ? '' : 's'}` }\n        </Typography>\n      </ExpansionPanelSummary>\n      { albums.length > 0 &&\n        <ExpansionPanelDetails classes={{ root: classes.detailRoot }}>\n          {albums.map(album => {\n            return <div key={album.id} style={{ width: '100%', textAlign: 'left' }}>\n              <div style={detailStyle}>\n                <a href={album.external_urls.spotify} target='_blank' rel=\"noopener noreferrer\">\n                  <img src={album.images[1].url} alt='album cover' height='100' width='100'></img>\n                </a>\n                <div style={{ display: 'flex', justifyContent: 'space-between', marginLeft: 25, width: '75%' }}>\n                  <div style={{ flexBasis: 280, display: 'flex', justifyContent: 'flex-start' }}>\n                    <Typography variant='h6'>{album.name}</Typography>\n                  </div>\n                  <Typography variant='h6' className='music-display__tracks'>{`${album.total_tracks} Tracks`}</Typography>\n                  <Typography variant='h6' className='music-display__date'>{album.release_date.substring(0, 4)}</Typography>\n                </div>\n              </div>\n              <Divider variant=\"middle\" />\n            </div>\n          })}\n        </ExpansionPanelDetails>\n      }\n    </ExpansionPanel>    \n  )\n};\n\nexport default MusicDisplay;","import React from 'react';\nimport { connect } from 'react-redux';\nimport MusicDisplay from './MusicDisplay';\n\nimport './musicSummary.css'\n\nconst MusicSummary = ({searchedArtists, currentArtist, spotifyAlbums}) => {\n  return (\n    <div className='music-summary'>\n      {currentArtist && spotifyAlbums ?\n        <MusicDisplay\n          currentArtist={currentArtist}\n          service='Spotify'\n          albums={spotifyAlbums}\n        />\n        : <h3 style={{ color: 'white' }}>Sorry, no results :(</h3>\n      }\n      {searchedArtists.length > 0 &&\n        <div style={{ color: 'white' }}>\n          <h2>Recently Searched Artists</h2>\n          {searchedArtists.map(artist => {\n            return <p key={artist}>{artist}</p>\n          })}\n        </div>\n      }\n    </div>\n  )};\n\nconst mapStateToProps = (state) => {\n  return { \n    searchedArtists: state.searchedArtists, \n    spotifyAlbums: state.spotifyAlbums,\n    currentArtist: state.currentArtist \n  }\n}\n\nexport default connect(mapStateToProps)(MusicSummary);","import React from 'react';\nimport { connect } from 'react-redux';\nimport Search from './search/Search.js';\nimport MusicSummary from './musicSummary/MusicSummary';\nimport './App.css';\n\nfunction App({ searchedArtists, spotifyAccessToken, showMusicSummary }) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Spotify Album Lookup</h1>\n      </header>\n      <Search />\n      {searchedArtists.length > 0 \n        ? !spotifyAccessToken \n          ? <h3 style={{ color: 'white' }}>Sorry, we cannot connect to Spotify right now :(</h3>\n          : showMusicSummary\n            ? <MusicSummary />\n            : null\n        : null\n      }\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    searchedArtists: state.searchedArtists,\n    spotifyAccessToken: state.spotifyAccessToken,\n    showMusicSummary: state.showMusicSummary\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\n\nexport const searchedArtists = (searchedArtists = [], action) => {\n  if (action.type === 'LOG_SEARCH') {\n    if (!searchedArtists.includes(action.payload)) {\n      return [...searchedArtists, action.payload];\n    }\n  }\n  return searchedArtists;\n}\n\nexport const showMusicSummary = (showMusicSummary = false, action) => {\n  if (action.type === 'SHOW_MUSIC_SUMMARY') {\n    return action.payload;\n  }\n  return showMusicSummary;\n}\n\nexport const currentArtist = (currentArtist = '', action) => {\n  if (action.type === 'CURRENT_ARTIST') {\n    return action.payload;\n  } else if (action.type === 'CURRENT_ARTIST_FAILURE') {\n    return '';\n  }\n  return currentArtist;\n}\n\nexport const spotifyAccessToken = (spotifyAccessToken = '', action) => {\n  switch (action.type) {\n    case 'SPOTIFY_TOKEN_LOADING':\n      return 'loading';\n    case 'SPOTIFY_TOKEN_SUCCESS':\n      return action.payload;\n    case 'SPOTIFY_TOKEN_FAILURE':\n      return false;\n    default:\n      return spotifyAccessToken\n  }\n}\n\nconst cleanSpotifyData = (albums) => {\n  let lookup = {};\n  let cleanedAlbums = [];\n  for (let album of albums) {\n    if (!lookup[album.name]) {\n      lookup[album.name] = true;\n      cleanedAlbums.push(album);\n    }\n  }\n  return cleanedAlbums;\n}\n\nexport const spotifyAlbums = (spotifyAlbums = false, action) => {\n  switch (action.type) {\n    case 'SPOTIFY_ALBUM_SUCCESS':\n      const cleanedAlbums = cleanSpotifyData(action.payload)\n      // console.log(cleanedAlbums)\n      return cleanedAlbums;\n    case 'SPOTIFY_ALBUM_FAILURE':\n      return false;\n    default:\n      return spotifyAlbums;\n  }\n}\n\nexport default combineReducers({ searchedArtists, showMusicSummary, spotifyAccessToken, spotifyAlbums, currentArtist });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport reducers from './reducers/reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(thunk),\n    window.navigator.userAgent.includes('Chrome') ?\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() : compose\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}